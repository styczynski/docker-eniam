
day-lex:      /(date+day+day-month):unk;
date:         /(1+year-lex):unk;
day:          /month-lex:Poss;
day-interval: /month-lex:Poss;
day-month:    /(1+year-lex):Poss;
year-lex:     |(1+adjp*number*case*gender):unk;
month-lex:    /(1+year+np*T*gen*T*T):Poss;

date-interval:        null;
day-month-interval:   null;
month-interval:       null;
year:                 null;
year-interval:        null;
roman:                null;
roman-interval:       null;
hour-minute:          null;
hour:                 null;
hour-minute-interval: null;
hour-interval:        null;
obj-id:               null;
match-result:         null;
url:                  null;
email:                null;

np:
  \(1+num*number*case*gender*person*congr*nsem+num*number*case*gender*person*rec*nsem):adjunct \(1+qub):adjunct /(1+inclusion):adjunct
  \(1+measure*unumber*ucase*ugender*uperson):Measure
  /(1+date+day+day-month+date-interval+day-interval+day-month-interval+year+year-interval+hour+hour-minute+hour-interval+hour-minute-interval+roman+roman-interval):Coref
  |(1+year):unk /(1+obj-id):Coref;

num: \(1+qub):adjunct /(1+inclusion):adjunct;

measure:
  \(1+num*number*case*gender*person*congr*count+num*number*case*gender*person*rec*count):adjunct \(1+qub):adjunct /(1+inclusion):adjunct;

#prepnp: \(1+advp*T):adjunct /(np*T*case*T*T+day-month+day+year+date+hour+hour-minute):unk \(1+qub):adjunct /(1+inclusion):adjunct;
#prepadjp: \(1+advp*T):adjunct /(adjp*T*case*T+adjp*sg*dat*m1+adjp*T*postp*T+adjp*sg*nom*f+advp*T):unk \(1+qub):adjunct /(1+inclusion):adjunct;
#compar: \(1+advp*T):adjunct /(np*T*case*T*T+prepnp*T*T+prepadjp*T*T):unk \(1+qub):adjunct /(1+inclusion):adjunct;
prepnp: \(1+advp*T):adjunct \(1+qub):adjunct /(1+inclusion):adjunct;
prepadjp: \(1+advp*T):adjunct \(1+qub):adjunct /(1+inclusion):adjunct;
compar: \(1+advp*T):adjunct \(1+qub):adjunct /(1+inclusion):adjunct;

adjp: \(1+qub):adjunct /(1+inclusion):adjunct \(1+adja):unk;

adja: /hyphen:nosem;

advp: \(1+qub):adjunct /(1+inclusion):adjunct \(1+adja):unk;

#FIXME: sprawdzić czy 'or' czy 'or2'
ip: /(1+int):unk \(1+qub):adjunct /(1+inclusion):adjunct \(1+nie):nosem |(1+aux-imp):nosem
  |(1+aux-fut*number*gender*person+aux-past*number*gender*person):nosem |(1+aglt*number*person):nosem |(1+by):nosem /(1+or):adjunct;

aux-fut: null;
aux-past: null;
aglt: null;

infp: \(1+qub):adjunct /(1+inclusion):adjunct \(1+nie):nosem;
padvp: \(1+qub):adjunct /(1+inclusion):adjunct \(1+nie):nosem;

cp: /ip*T*T*T:unk;
ncp: \(1+qub):adjunct /(1+inclusion):adjunct /cp*ctype*plemma:unk;

#lemma=i|lub|czy|bądź,pos=conj:
#  QUANT[number=all_numbers,gender=all_genders,person=all_persons]
#  (ip*number*gender*person/ip*T*T*T)\ip*T*T*T;
#lemma=,|i|lub|czy|bądź,pos=conj: (advp*mod/prepnp*T*T)\prepnp*T*T;
#lemma=,|i|lub|czy|bądź,pos=conj: QUANT[mode=0] (advp*mode/advp*mode)\prepnp*T*T;
#lemma=,|i|lub|czy|bądź,pos=conj: QUANT[mode=0] (advp*mode/prepnp*T*T)\advp*mode;
#lemma=,|i|lub|czy|bądź,pos=conj: (advp*mod/advp*T)\advp*T; #FIXME: przydałaby się wersja zachowująca mode
#lemma=,|i|lub|czy|bądź,pos=conj:
#  QUANT[plemma=0,case=all_cases]
#  (prepnp*plemma*case/prepnp*plemma*case)\prepnp*plemma*case;
#lemma=,|i|lub|czy|bądź,pos=conj:
#  QUANT[number=all_numbers,case=all_cases,gender=all_genders,person=all_persons]
#  (np*number*case*gender*person/np*T*case*T*T)\np*T*case*T*T;
#lemma=,|i|lub|czy|bądź,pos=conj:
#  QUANT[number=all_numbers,case=all_cases,gender=all_genders]
#  (adjp*number*case*gender/adjp*number*case*gender)\adjp*number*case*gender;

lex-się-qub: null;
nie: null;
by: null;
aux-imp: null;
qub: null;
interj: null;
hyphen: null;
int: null;
#lemma=„,pos=interp:       QUANT[number=0,case=0,gender=0,person=0] (np*number*case*gender*person/rquot)/np*number*case*gender*person; #SetAttr("QUOT",Val "+",Var "x"
#lemma=«,pos=interp:       QUANT[number=0,case=0,gender=0,person=0] (np*number*case*gender*person/rquot2)/np*number*case*gender*person; #SetAttr("QUOT",Val "+",Var "x"
#lemma=»,pos=interp:       QUANT[number=0,case=0,gender=0,person=0] (np*number*case*gender*person/rquot3)/np*number*case*gender*person; #SetAttr("QUOT",Val "+",Var "x"
rquot: null;
rquot2: null;
rquot3: null;
#lemma=(,pos=interp:       (inclusion/rparen)/(np*T*T*T*T+ip*T*T*T+adjp*T*T*T+prepnp*T*T); #SetAttr("INCLUSION",Val "+",
#lemma=[,pos=interp:       (inclusion/rparen2)/(np*T*T*T*T+ip*T*T*T+adjp*T*T*T+prepnp*T*T); #SetAttr("INCLUSION",Val "+",
rparen: null;
rparen2: null;

<conll_root>: /(ip*T*T*T+cp*int*T+np*sg*voc*T*T+interj):unk;
s: \?(ip*T*T*T+cp*int*T+np*sg*voc*T*T+interj):null;
<root>: /(1+s):unk /(1+<speaker-end>):unk /(1+or):unk /(1+np*T*nom*T*T):unk /(1+ip*T*T*T):unk;

or: null;
<colon>: \<speaker>:unk /(1+<squery>):unk;
or2: \?(ip*T*T*T+cp*int*T+np*sg*voc*T*T+interj):unk;
<speaker-end>: null
